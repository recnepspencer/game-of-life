// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  firstName    String
  lastName     String
  externalId   String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  gamesPlayed  Int           @default(0)
  gamesWon     Int           @default(0)
  gamesLost    Int           @default(0)
  gamesDrawn   Int           @default(0)
  about        String?
  gameSessions GameSession[]
}

model GameSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  result    String // e.g., "win", "lose", or "draw"
}



model FakeUser {
  firstName  String
  id         Int     @id @default(autoincrement())
  lastName   String
  gamesWon   Int     @default(0)
  gamesLost  Int     @default(0)
  gamesDrawn Int     @default(0)
  about      String?
}

model TestGameObject {
  id        Int     @id @default(autoincrement())  // Ensures `id` is autoincremented
  gridData  String  // Assumes `gridData` will hold serialized data in a string format
  userId    Int     @default(0)
  user      User    @relation(fields: [userId], references: [id])
}
